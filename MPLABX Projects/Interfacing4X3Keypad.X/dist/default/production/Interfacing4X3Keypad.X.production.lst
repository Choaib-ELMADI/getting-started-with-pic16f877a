

Microchip MPLAB XC8 Assembler V2.45 build 20230818022343 
                                                                                               Thu May 16 21:30:48 2024

Microchip MPLAB XC8 C Compiler v2.45 (Free license) build 20230818022343 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,split=1,delta=2
     8                           	psect	text1,local,class=CODE,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,merge=1,delta=2
    12                           	psect	text5,local,class=CODE,merge=1,delta=2
    13                           	psect	text6,local,class=CODE,merge=1,delta=2
    14                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    15                           	dabs	1,0x7E,2
    16     0000                     
    17                           ; Generated 22/03/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC16F877A Definitions
    49                           ; 
    50                           ; SFR Addresses
    51     0000                     	;# 
    52     0001                     	;# 
    53     0002                     	;# 
    54     0003                     	;# 
    55     0004                     	;# 
    56     0005                     	;# 
    57     0006                     	;# 
    58     0007                     	;# 
    59     0008                     	;# 
    60     0009                     	;# 
    61     000A                     	;# 
    62     000B                     	;# 
    63     000C                     	;# 
    64     000D                     	;# 
    65     000E                     	;# 
    66     000E                     	;# 
    67     000F                     	;# 
    68     0010                     	;# 
    69     0011                     	;# 
    70     0012                     	;# 
    71     0013                     	;# 
    72     0014                     	;# 
    73     0015                     	;# 
    74     0015                     	;# 
    75     0016                     	;# 
    76     0017                     	;# 
    77     0018                     	;# 
    78     0019                     	;# 
    79     001A                     	;# 
    80     001B                     	;# 
    81     001B                     	;# 
    82     001C                     	;# 
    83     001D                     	;# 
    84     001E                     	;# 
    85     001F                     	;# 
    86     0081                     	;# 
    87     0085                     	;# 
    88     0086                     	;# 
    89     0087                     	;# 
    90     0088                     	;# 
    91     0089                     	;# 
    92     008C                     	;# 
    93     008D                     	;# 
    94     008E                     	;# 
    95     0091                     	;# 
    96     0092                     	;# 
    97     0093                     	;# 
    98     0094                     	;# 
    99     0098                     	;# 
   100     0099                     	;# 
   101     009C                     	;# 
   102     009D                     	;# 
   103     009E                     	;# 
   104     009F                     	;# 
   105     010C                     	;# 
   106     010D                     	;# 
   107     010E                     	;# 
   108     010F                     	;# 
   109     018C                     	;# 
   110     018D                     	;# 
   111     0000                     	;# 
   112     0001                     	;# 
   113     0002                     	;# 
   114     0003                     	;# 
   115     0004                     	;# 
   116     0005                     	;# 
   117     0006                     	;# 
   118     0007                     	;# 
   119     0008                     	;# 
   120     0009                     	;# 
   121     000A                     	;# 
   122     000B                     	;# 
   123     000C                     	;# 
   124     000D                     	;# 
   125     000E                     	;# 
   126     000E                     	;# 
   127     000F                     	;# 
   128     0010                     	;# 
   129     0011                     	;# 
   130     0012                     	;# 
   131     0013                     	;# 
   132     0014                     	;# 
   133     0015                     	;# 
   134     0015                     	;# 
   135     0016                     	;# 
   136     0017                     	;# 
   137     0018                     	;# 
   138     0019                     	;# 
   139     001A                     	;# 
   140     001B                     	;# 
   141     001B                     	;# 
   142     001C                     	;# 
   143     001D                     	;# 
   144     001E                     	;# 
   145     001F                     	;# 
   146     0081                     	;# 
   147     0085                     	;# 
   148     0086                     	;# 
   149     0087                     	;# 
   150     0088                     	;# 
   151     0089                     	;# 
   152     008C                     	;# 
   153     008D                     	;# 
   154     008E                     	;# 
   155     0091                     	;# 
   156     0092                     	;# 
   157     0093                     	;# 
   158     0094                     	;# 
   159     0098                     	;# 
   160     0099                     	;# 
   161     009C                     	;# 
   162     009D                     	;# 
   163     009E                     	;# 
   164     009F                     	;# 
   165     010C                     	;# 
   166     010D                     	;# 
   167     010E                     	;# 
   168     010F                     	;# 
   169     018C                     	;# 
   170     018D                     	;# 
   171     0006                     _PORTBbits	set	6
   172     0008                     _PORTD	set	8
   173     0007                     _PORTCbits	set	7
   174     0088                     _TRISD	set	136
   175     0086                     _TRISB	set	134
   176     043F                     _TRISC7	set	1087
   177     043E                     _TRISC6	set	1086
   178     043D                     _TRISC5	set	1085
   179                           
   180                           	psect	strings
   181     0003                     __pstrings:
   182     0003                     stringtab:
   183     0003                     __stringtab:
   184     0003                     stringcode:	
   185                           ;	String table - string pointers are 1 byte each
   186                           
   187     0003                     stringdir:
   188     0003  3000               	movlw	high stringdir
   189     0004  008A               	movwf	10
   190     0005  0804               	movf	4,w
   191     0006  0A84               	incf	4,f
   192     0007  0782               	addwf	2,f
   193     0008                     __stringbase:
   194     0008  3400               	retlw	0
   195     0009                     __end_of__stringtab:
   196     0009                     STR_1:
   197     0009  3434               	retlw	52	;'4'
   198     000A  3458               	retlw	88	;'X'
   199     000B  3433               	retlw	51	;'3'
   200     000C  3420               	retlw	32	;' '
   201     000D  344B               	retlw	75	;'K'
   202     000E  3445               	retlw	69	;'E'
   203     000F  3459               	retlw	89	;'Y'
   204     0010  3450               	retlw	80	;'P'
   205     0011  3441               	retlw	65	;'A'
   206     0012  3444               	retlw	68	;'D'
   207     0013  343A               	retlw	58	;':'
   208     0014  3400               	retlw	0
   209     0015                     STR_4:
   210     0015  3433               	retlw	51	;'3'
   211     0016  3436               	retlw	54	;'6'
   212     0017  3439               	retlw	57	;'9'
   213     0018  3423               	retlw	35	;'#'
   214     0019  3400               	retlw	0
   215     001A                     STR_2:
   216     001A  3431               	retlw	49	;'1'
   217     001B  3434               	retlw	52	;'4'
   218     001C  3437               	retlw	55	;'7'
   219     001D  342A               	retlw	42	;'*'
   220     001E  3400               	retlw	0
   221     001F                     STR_3:
   222     001F  3432               	retlw	50	;'2'
   223     0020  3435               	retlw	53	;'5'
   224     0021  3438               	retlw	56	;'8'
   225     0022  3430               	retlw	48	;'0'
   226     0023  3400               	retlw	0
   227                           
   228                           	psect	cinit
   229     07FC                     start_initialization:	
   230                           ; #config settings
   231                           
   232     07FC                     __initialization:
   233     07FC                     end_of_initialization:	
   234                           ;End of C runtime variable initialization code
   235                           
   236     07FC                     __end_of__initialization:
   237     07FC  0183               	clrf	3
   238     07FD  120A  118A  2F70   	ljmp	_main	;jump to C main() function
   239                           
   240                           	psect	cstackCOMMON
   241     0070                     __pcstackCOMMON:
   242     0070                     ?_lcd_initialize:
   243     0070                     ?_lcd_command:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ??_lcd_command:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     ?_keypad:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ?_check_active_row:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ?_main:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ?_lcd_data:	
   259                           ; 1 bytes @ 0x0
   260                           
   261     0070                     ??_lcd_data:	
   262                           ; 1 bytes @ 0x0
   263                           
   264                           
   265                           ; 1 bytes @ 0x0
   266     0070                     	ds	2
   267     0072                     lcd_data@data:
   268     0072                     lcd_command@cmd:	
   269                           ; 1 bytes @ 0x2
   270                           
   271                           
   272                           ; 1 bytes @ 0x2
   273     0072                     	ds	1
   274     0073                     ??_lcd_initialize:
   275     0073                     ?_lcd_string:	
   276                           ; 1 bytes @ 0x3
   277                           
   278     0073                     ??_check_active_row:	
   279                           ; 1 bytes @ 0x3
   280                           
   281     0073                     lcd_string@len:	
   282                           ; 1 bytes @ 0x3
   283                           
   284     0073                     check_active_row@str:	
   285                           ; 1 bytes @ 0x3
   286                           
   287                           
   288                           ; 1 bytes @ 0x3
   289     0073                     	ds	1
   290     0074                     ??_lcd_string:
   291     0074                     ??_keypad:	
   292                           ; 1 bytes @ 0x4
   293                           
   294     0074                     lcd_string@str:	
   295                           ; 1 bytes @ 0x4
   296                           
   297                           
   298                           ; 1 bytes @ 0x4
   299     0074                     	ds	1
   300     0075                     lcd_string@i:
   301                           
   302                           ; 1 bytes @ 0x5
   303     0075                     	ds	1
   304     0076                     ??_main:
   305                           
   306                           	psect	maintext
   307     0770                     __pmaintext:	
   308                           ; 1 bytes @ 0x6
   309 ;;
   310 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   311 ;;
   312 ;; *************** function _main *****************
   313 ;; Defined at:
   314 ;;		line 33 in file "main.c"
   315 ;; Parameters:    Size  Location     Type
   316 ;;		None
   317 ;; Auto vars:     Size  Location     Type
   318 ;;		None
   319 ;; Return value:  Size  Location     Type
   320 ;;                  1    wreg      void 
   321 ;; Registers used:
   322 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   323 ;; Tracked objects:
   324 ;;		On entry : B00/0
   325 ;;		On exit  : 0/0
   326 ;;		Unchanged: 0/0
   327 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   328 ;;      Params:         0       0       0       0       0
   329 ;;      Locals:         0       0       0       0       0
   330 ;;      Temps:          0       0       0       0       0
   331 ;;      Totals:         0       0       0       0       0
   332 ;;Total ram usage:        0 bytes
   333 ;; Hardware stack levels required when called: 3
   334 ;; This function calls:
   335 ;;		_keypad
   336 ;;		_lcd_command
   337 ;;		_lcd_initialize
   338 ;;		_lcd_string
   339 ;; This function is called by:
   340 ;;		Startup code after reset
   341 ;; This function uses a non-reentrant model
   342 ;;
   343                           
   344     0770                     _main:	
   345                           ;psect for function _main
   346                           
   347     0770                     l722:	
   348                           ;incstack = 0
   349                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   350                           
   351                           
   352                           ;main.c: 34:     TRISB = 0xF0;
   353     0770  30F0               	movlw	240
   354     0771  1683               	bsf	3,5	;RP0=1, select bank1
   355     0772  1303               	bcf	3,6	;RP1=0, select bank1
   356     0773  0086               	movwf	6	;volatile
   357     0774                     l724:
   358                           
   359                           ;main.c: 36:     TRISC5 = 0;
   360     0774  1287               	bcf	7,5	;volatile
   361     0775                     l726:
   362                           
   363                           ;main.c: 37:     TRISC6 = 0;
   364     0775  1307               	bcf	7,6	;volatile
   365     0776                     l728:
   366                           
   367                           ;main.c: 38:     TRISC7 = 0;
   368     0776  1387               	bcf	7,7	;volatile
   369     0777                     l730:
   370                           
   371                           ;main.c: 40:     TRISD = 0x00;
   372     0777  0188               	clrf	8	;volatile
   373     0778                     l732:
   374                           
   375                           ;main.c: 42:     lcd_initialize();
   376     0778  120A  118A  271A  120A  118A  	fcall	_lcd_initialize
   377     077D                     l734:
   378                           
   379                           ;main.c: 44:     lcd_command(0x83);
   380     077D  3083               	movlw	131
   381     077E  120A  118A  2705  120A  118A  	fcall	_lcd_command
   382     0783                     l736:
   383                           
   384                           ;main.c: 45:     lcd_string("4X3 KEYPAD:", 11);
   385     0783  300B               	movlw	11
   386     0784  00F3               	movwf	lcd_string@len
   387     0785  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   388     0786  120A  118A  2733  120A  118A  	fcall	_lcd_string
   389     078B                     l738:
   390                           
   391                           ;main.c: 46:     lcd_command(0xC0);
   392     078B  30C0               	movlw	192
   393     078C  120A  118A  2705  120A  118A  	fcall	_lcd_command
   394     0791                     l740:
   395                           
   396                           ;main.c: 49:         keypad();
   397     0791  120A  118A  274E  120A  118A  	fcall	_keypad
   398     0796  2F91               	goto	l740
   399     0797  120A  118A  2800   	ljmp	start
   400     079A                     __end_of_main:
   401                           
   402                           	psect	text1
   403     0733                     __ptext1:	
   404 ;; *************** function _lcd_string *****************
   405 ;; Defined at:
   406 ;;		line 71 in file "main.c"
   407 ;; Parameters:    Size  Location     Type
   408 ;;  str             1    wreg     PTR const unsigned char 
   409 ;;		 -> STR_1(12), 
   410 ;;  len             1    3[COMMON] unsigned char 
   411 ;; Auto vars:     Size  Location     Type
   412 ;;  str             1    4[COMMON] PTR const unsigned char 
   413 ;;		 -> STR_1(12), 
   414 ;;  i               1    5[COMMON] unsigned char 
   415 ;; Return value:  Size  Location     Type
   416 ;;                  1    wreg      void 
   417 ;; Registers used:
   418 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   419 ;; Tracked objects:
   420 ;;		On entry : 0/0
   421 ;;		On exit  : 0/0
   422 ;;		Unchanged: 0/0
   423 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   424 ;;      Params:         1       0       0       0       0
   425 ;;      Locals:         2       0       0       0       0
   426 ;;      Temps:          0       0       0       0       0
   427 ;;      Totals:         3       0       0       0       0
   428 ;;Total ram usage:        3 bytes
   429 ;; Hardware stack levels used: 1
   430 ;; Hardware stack levels required when called: 1
   431 ;; This function calls:
   432 ;;		_lcd_data
   433 ;; This function is called by:
   434 ;;		_main
   435 ;; This function uses a non-reentrant model
   436 ;;
   437                           
   438     0733                     _lcd_string:	
   439                           ;psect for function _lcd_string
   440                           
   441                           
   442                           ;incstack = 0
   443                           ; Regs used in _lcd_string: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   444                           ;lcd_string@str stored from wreg
   445     0733  00F4               	movwf	lcd_string@str
   446     0734                     l698:
   447                           
   448                           ;main.c: 72:     unsigned char i;;main.c: 73:     for (i=0; i<len; ++i) {
   449     0734  01F5               	clrf	lcd_string@i
   450     0735  2F47               	goto	l704
   451     0736                     l700:
   452                           
   453                           ;main.c: 74:         lcd_data(str[i]);
   454     0736  0875               	movf	lcd_string@i,w
   455     0737  0774               	addwf	lcd_string@str,w
   456     0738  0084               	movwf	4
   457     0739  120A  118A  2003  120A  118A  	fcall	stringdir
   458     073E  120A  118A  26F0  120A  118A  	fcall	_lcd_data
   459     0743                     l702:
   460                           
   461                           ;main.c: 75:     }
   462     0743  3001               	movlw	1
   463     0744  00FF               	movwf	btemp+1
   464     0745  087F               	movf	btemp+1,w
   465     0746  07F5               	addwf	lcd_string@i,f
   466     0747                     l704:
   467     0747  0873               	movf	lcd_string@len,w
   468     0748  0275               	subwf	lcd_string@i,w
   469     0749  1C03               	skipc
   470     074A  2F4C               	goto	u181
   471     074B  2F4D               	goto	u180
   472     074C                     u181:
   473     074C  2F36               	goto	l700
   474     074D                     u180:
   475     074D                     l48:
   476     074D  0008               	return
   477     074E                     __end_of_lcd_string:
   478                           
   479                           	psect	text2
   480     071A                     __ptext2:	
   481 ;; *************** function _lcd_initialize *****************
   482 ;; Defined at:
   483 ;;		line 55 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		wreg, status,2, status,0, pclath, cstack
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   497 ;;      Params:         0       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0
   499 ;;      Temps:          0       0       0       0       0
   500 ;;      Totals:         0       0       0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels used: 1
   503 ;; Hardware stack levels required when called: 1
   504 ;; This function calls:
   505 ;;		_lcd_command
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511     071A                     _lcd_initialize:	
   512                           ;psect for function _lcd_initialize
   513                           
   514     071A                     l642:	
   515                           ;incstack = 0
   516                           ; Regs used in _lcd_initialize: [wreg+status,2+status,0+pclath+cstack]
   517                           
   518                           
   519                           ;main.c: 56:     lcd_command(0x38);
   520     071A  3038               	movlw	56
   521     071B  120A  118A  2705  120A  118A  	fcall	_lcd_command
   522                           
   523                           ;main.c: 57:     lcd_command(0x06);
   524     0720  3006               	movlw	6
   525     0721  120A  118A  2705  120A  118A  	fcall	_lcd_command
   526                           
   527                           ;main.c: 58:     lcd_command(0x0C);
   528     0726  300C               	movlw	12
   529     0727  120A  118A  2705  120A  118A  	fcall	_lcd_command
   530                           
   531                           ;main.c: 59:     lcd_command(0x01);
   532     072C  3001               	movlw	1
   533     072D  120A  118A  2705  120A  118A  	fcall	_lcd_command
   534     0732                     l39:
   535     0732  0008               	return
   536     0733                     __end_of_lcd_initialize:
   537                           
   538                           	psect	text3
   539     0705                     __ptext3:	
   540 ;; *************** function _lcd_command *****************
   541 ;; Defined at:
   542 ;;		line 78 in file "main.c"
   543 ;; Parameters:    Size  Location     Type
   544 ;;  cmd             1    wreg     unsigned char 
   545 ;; Auto vars:     Size  Location     Type
   546 ;;  cmd             1    2[COMMON] unsigned char 
   547 ;; Return value:  Size  Location     Type
   548 ;;                  1    wreg      void 
   549 ;; Registers used:
   550 ;;		wreg
   551 ;; Tracked objects:
   552 ;;		On entry : 0/0
   553 ;;		On exit  : 0/0
   554 ;;		Unchanged: 0/0
   555 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   556 ;;      Params:         0       0       0       0       0
   557 ;;      Locals:         1       0       0       0       0
   558 ;;      Temps:          2       0       0       0       0
   559 ;;      Totals:         3       0       0       0       0
   560 ;;Total ram usage:        3 bytes
   561 ;; Hardware stack levels used: 1
   562 ;; This function calls:
   563 ;;		Nothing
   564 ;; This function is called by:
   565 ;;		_main
   566 ;;		_lcd_initialize
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570     0705                     _lcd_command:	
   571                           ;psect for function _lcd_command
   572                           
   573                           
   574                           ;incstack = 0
   575                           ; Regs used in _lcd_command: [wreg]
   576                           ;lcd_command@cmd stored from wreg
   577     0705  00F2               	movwf	lcd_command@cmd
   578     0706                     l626:
   579                           
   580                           ;main.c: 79:     PORTCbits.RC7 = 1;
   581     0706  1283               	bcf	3,5	;RP0=0, select bank0
   582     0707  1303               	bcf	3,6	;RP1=0, select bank0
   583     0708  1787               	bsf	7,7	;volatile
   584                           
   585                           ;main.c: 80:     PORTCbits.RC5 = 0;
   586     0709  1287               	bcf	7,5	;volatile
   587                           
   588                           ;main.c: 81:     PORTCbits.RC6 = 0;
   589     070A  1307               	bcf	7,6	;volatile
   590     070B                     l628:
   591                           
   592                           ;main.c: 82:     PORTD = cmd;
   593     070B  0872               	movf	lcd_command@cmd,w
   594     070C  0088               	movwf	8	;volatile
   595                           
   596                           ;main.c: 83:     _delay((unsigned long)((5)*(20000000/4000.0)));
   597     070D  3021               	movlw	33
   598     070E  00F1               	movwf	??_lcd_command+1
   599     070F  3076               	movlw	118
   600     0710  00F0               	movwf	??_lcd_command
   601     0711                     u197:
   602     0711  0BF0               	decfsz	??_lcd_command,f
   603     0712  2F11               	goto	u197
   604     0713  0BF1               	decfsz	??_lcd_command+1,f
   605     0714  2F11               	goto	u197
   606     0715  0000               	nop
   607     0716                     l630:
   608                           
   609                           ;main.c: 84:     PORTCbits.RC7 = 0;
   610     0716  1283               	bcf	3,5	;RP0=0, select bank0
   611     0717  1303               	bcf	3,6	;RP1=0, select bank0
   612     0718  1387               	bcf	7,7	;volatile
   613     0719                     l51:
   614     0719  0008               	return
   615     071A                     __end_of_lcd_command:
   616                           
   617                           	psect	text4
   618     074E                     __ptext4:	
   619 ;; *************** function _keypad *****************
   620 ;; Defined at:
   621 ;;		line 87 in file "main.c"
   622 ;; Parameters:    Size  Location     Type
   623 ;;		None
   624 ;; Auto vars:     Size  Location     Type
   625 ;;		None
   626 ;; Return value:  Size  Location     Type
   627 ;;                  1    wreg      void 
   628 ;; Registers used:
   629 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   630 ;; Tracked objects:
   631 ;;		On entry : 0/0
   632 ;;		On exit  : 0/0
   633 ;;		Unchanged: 0/0
   634 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   635 ;;      Params:         0       0       0       0       0
   636 ;;      Locals:         0       0       0       0       0
   637 ;;      Temps:          0       0       0       0       0
   638 ;;      Totals:         0       0       0       0       0
   639 ;;Total ram usage:        0 bytes
   640 ;; Hardware stack levels used: 1
   641 ;; Hardware stack levels required when called: 2
   642 ;; This function calls:
   643 ;;		_check_active_row
   644 ;; This function is called by:
   645 ;;		_main
   646 ;; This function uses a non-reentrant model
   647 ;;
   648                           
   649     074E                     _keypad:	
   650                           ;psect for function _keypad
   651                           
   652     074E                     l706:	
   653                           ;incstack = 0
   654                           ; Regs used in _keypad: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   655                           
   656                           
   657                           ;main.c: 88:     PORTBbits.RB2 = 1; PORTBbits.RB1 = 0; PORTBbits.RB0 = 0;
   658     074E  1283               	bcf	3,5	;RP0=0, select bank0
   659     074F  1303               	bcf	3,6	;RP1=0, select bank0
   660     0750  1506               	bsf	6,2	;volatile
   661     0751  1086               	bcf	6,1	;volatile
   662     0752  1006               	bcf	6,0	;volatile
   663     0753                     l708:
   664                           
   665                           ;main.c: 89:     check_active_row("147*");
   666     0753  3012               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   667     0754  120A  118A  279A  120A  118A  	fcall	_check_active_row
   668     0759                     l710:
   669                           
   670                           ;main.c: 91:     PORTBbits.RB2 = 0; PORTBbits.RB1 = 1; PORTBbits.RB0 = 0;
   671     0759  1283               	bcf	3,5	;RP0=0, select bank0
   672     075A  1303               	bcf	3,6	;RP1=0, select bank0
   673     075B  1106               	bcf	6,2	;volatile
   674     075C                     l712:
   675     075C  1486               	bsf	6,1	;volatile
   676     075D                     l714:
   677     075D  1006               	bcf	6,0	;volatile
   678                           
   679                           ;main.c: 92:     check_active_row("2580");
   680     075E  3017               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
   681     075F  120A  118A  279A  120A  118A  	fcall	_check_active_row
   682     0764                     l716:
   683                           
   684                           ;main.c: 94:     PORTBbits.RB2 = 0; PORTBbits.RB1 = 0; PORTBbits.RB0 = 1;
   685     0764  1283               	bcf	3,5	;RP0=0, select bank0
   686     0765  1303               	bcf	3,6	;RP1=0, select bank0
   687     0766  1106               	bcf	6,2	;volatile
   688     0767                     l718:
   689     0767  1086               	bcf	6,1	;volatile
   690     0768                     l720:
   691     0768  1406               	bsf	6,0	;volatile
   692                           
   693                           ;main.c: 95:     check_active_row("369#");
   694     0769  300D               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
   695     076A  120A  118A  279A  120A  118A  	fcall	_check_active_row
   696     076F                     l54:
   697     076F  0008               	return
   698     0770                     __end_of_keypad:
   699                           
   700                           	psect	text5
   701     079A                     __ptext5:	
   702 ;; *************** function _check_active_row *****************
   703 ;; Defined at:
   704 ;;		line 98 in file "main.c"
   705 ;; Parameters:    Size  Location     Type
   706 ;;  str             1    wreg     PTR const unsigned char 
   707 ;;		 -> STR_4(5), STR_3(5), STR_2(5), 
   708 ;; Auto vars:     Size  Location     Type
   709 ;;  str             1    3[COMMON] PTR const unsigned char 
   710 ;;		 -> STR_4(5), STR_3(5), STR_2(5), 
   711 ;; Return value:  Size  Location     Type
   712 ;;                  1    wreg      void 
   713 ;; Registers used:
   714 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   715 ;; Tracked objects:
   716 ;;		On entry : 0/0
   717 ;;		On exit  : 0/0
   718 ;;		Unchanged: 0/0
   719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   720 ;;      Params:         0       0       0       0       0
   721 ;;      Locals:         1       0       0       0       0
   722 ;;      Temps:          0       0       0       0       0
   723 ;;      Totals:         1       0       0       0       0
   724 ;;Total ram usage:        1 bytes
   725 ;; Hardware stack levels used: 1
   726 ;; Hardware stack levels required when called: 1
   727 ;; This function calls:
   728 ;;		_lcd_data
   729 ;; This function is called by:
   730 ;;		_keypad
   731 ;; This function uses a non-reentrant model
   732 ;;
   733                           
   734     079A                     _check_active_row:	
   735                           ;psect for function _check_active_row
   736                           
   737                           
   738                           ;incstack = 0
   739                           ; Regs used in _check_active_row: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   740                           ;check_active_row@str stored from wreg
   741     079A  00F3               	movwf	check_active_row@str
   742     079B                     l688:
   743                           
   744                           ;main.c: 99:     if (PORTBbits.RB4) {
   745     079B  1283               	bcf	3,5	;RP0=0, select bank0
   746     079C  1303               	bcf	3,6	;RP1=0, select bank0
   747     079D  1E06               	btfss	6,4	;volatile
   748     079E  2FA0               	goto	u101
   749     079F  2FA1               	goto	u100
   750     07A0                     u101:
   751     07A0  2FB4               	goto	l57
   752     07A1                     u100:
   753     07A1                     l690:
   754                           
   755                           ;main.c: 100:         lcd_data(str[0]);
   756     07A1  0873               	movf	check_active_row@str,w
   757     07A2  0084               	movwf	4
   758     07A3  120A  118A  2003  120A  118A  	fcall	stringdir
   759     07A8  120A  118A  26F0  120A  118A  	fcall	_lcd_data
   760     07AD                     l58:	
   761                           ;main.c: 101:         while (PORTBbits.RB4) {}
   762                           
   763     07AD  1283               	bcf	3,5	;RP0=0, select bank0
   764     07AE  1303               	bcf	3,6	;RP1=0, select bank0
   765     07AF  1A06               	btfsc	6,4	;volatile
   766     07B0  2FB2               	goto	u111
   767     07B1  2FB3               	goto	u110
   768     07B2                     u111:
   769     07B2  2FAD               	goto	l58
   770     07B3                     u110:
   771     07B3  2FFB               	goto	l76
   772     07B4                     l57:	
   773                           ;main.c: 103:     else if (PORTBbits.RB5) {
   774                           
   775     07B4  1E86               	btfss	6,5	;volatile
   776     07B5  2FB7               	goto	u121
   777     07B6  2FB8               	goto	u120
   778     07B7                     u121:
   779     07B7  2FCC               	goto	l62
   780     07B8                     u120:
   781     07B8                     l692:
   782                           
   783                           ;main.c: 104:         lcd_data(str[1]);
   784     07B8  0873               	movf	check_active_row@str,w
   785     07B9  3E01               	addlw	1
   786     07BA  0084               	movwf	4
   787     07BB  120A  118A  2003  120A  118A  	fcall	stringdir
   788     07C0  120A  118A  26F0  120A  118A  	fcall	_lcd_data
   789     07C5                     l63:	
   790                           ;main.c: 105:         while (PORTBbits.RB5) {}
   791                           
   792     07C5  1283               	bcf	3,5	;RP0=0, select bank0
   793     07C6  1303               	bcf	3,6	;RP1=0, select bank0
   794     07C7  1A86               	btfsc	6,5	;volatile
   795     07C8  2FCA               	goto	u131
   796     07C9  2FCB               	goto	u130
   797     07CA                     u131:
   798     07CA  2FC5               	goto	l63
   799     07CB                     u130:
   800     07CB  2FFB               	goto	l76
   801     07CC                     l62:	
   802                           ;main.c: 107:     else if (PORTBbits.RB6) {
   803                           
   804     07CC  1F06               	btfss	6,6	;volatile
   805     07CD  2FCF               	goto	u141
   806     07CE  2FD0               	goto	u140
   807     07CF                     u141:
   808     07CF  2FE4               	goto	l67
   809     07D0                     u140:
   810     07D0                     l694:
   811                           
   812                           ;main.c: 108:         lcd_data(str[2]);
   813     07D0  0873               	movf	check_active_row@str,w
   814     07D1  3E02               	addlw	2
   815     07D2  0084               	movwf	4
   816     07D3  120A  118A  2003  120A  118A  	fcall	stringdir
   817     07D8  120A  118A  26F0  120A  118A  	fcall	_lcd_data
   818     07DD                     l68:	
   819                           ;main.c: 109:         while (PORTBbits.RB6) {}
   820                           
   821     07DD  1283               	bcf	3,5	;RP0=0, select bank0
   822     07DE  1303               	bcf	3,6	;RP1=0, select bank0
   823     07DF  1B06               	btfsc	6,6	;volatile
   824     07E0  2FE2               	goto	u151
   825     07E1  2FE3               	goto	u150
   826     07E2                     u151:
   827     07E2  2FDD               	goto	l68
   828     07E3                     u150:
   829     07E3  2FFB               	goto	l76
   830     07E4                     l67:	
   831                           ;main.c: 111:     else if (PORTBbits.RB7) {
   832                           
   833     07E4  1F86               	btfss	6,7	;volatile
   834     07E5  2FE7               	goto	u161
   835     07E6  2FE8               	goto	u160
   836     07E7                     u161:
   837     07E7  2FFB               	goto	l76
   838     07E8                     u160:
   839     07E8                     l696:
   840                           
   841                           ;main.c: 112:         lcd_data(str[3]);
   842     07E8  0873               	movf	check_active_row@str,w
   843     07E9  3E03               	addlw	3
   844     07EA  0084               	movwf	4
   845     07EB  120A  118A  2003  120A  118A  	fcall	stringdir
   846     07F0  120A  118A  26F0  120A  118A  	fcall	_lcd_data
   847     07F5                     l73:	
   848                           ;main.c: 113:         while (PORTBbits.RB7) {}
   849                           
   850     07F5  1283               	bcf	3,5	;RP0=0, select bank0
   851     07F6  1303               	bcf	3,6	;RP1=0, select bank0
   852     07F7  1B86               	btfsc	6,7	;volatile
   853     07F8  2FFA               	goto	u171
   854     07F9  2FFB               	goto	u170
   855     07FA                     u171:
   856     07FA  2FF5               	goto	l73
   857     07FB                     u170:
   858     07FB                     l76:
   859     07FB  0008               	return
   860     07FC                     __end_of_check_active_row:
   861                           
   862                           	psect	text6
   863     06F0                     __ptext6:	
   864 ;; *************** function _lcd_data *****************
   865 ;; Defined at:
   866 ;;		line 62 in file "main.c"
   867 ;; Parameters:    Size  Location     Type
   868 ;;  data            1    wreg     unsigned char 
   869 ;; Auto vars:     Size  Location     Type
   870 ;;  data            1    2[COMMON] unsigned char 
   871 ;; Return value:  Size  Location     Type
   872 ;;                  1    wreg      void 
   873 ;; Registers used:
   874 ;;		wreg
   875 ;; Tracked objects:
   876 ;;		On entry : 0/0
   877 ;;		On exit  : 0/0
   878 ;;		Unchanged: 0/0
   879 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   880 ;;      Params:         0       0       0       0       0
   881 ;;      Locals:         1       0       0       0       0
   882 ;;      Temps:          2       0       0       0       0
   883 ;;      Totals:         3       0       0       0       0
   884 ;;Total ram usage:        3 bytes
   885 ;; Hardware stack levels used: 1
   886 ;; This function calls:
   887 ;;		Nothing
   888 ;; This function is called by:
   889 ;;		_lcd_string
   890 ;;		_check_active_row
   891 ;; This function uses a non-reentrant model
   892 ;;
   893                           
   894     06F0                     _lcd_data:	
   895                           ;psect for function _lcd_data
   896                           
   897                           
   898                           ;incstack = 0
   899                           ; Regs used in _lcd_data: [wreg]
   900                           ;lcd_data@data stored from wreg
   901     06F0  00F2               	movwf	lcd_data@data
   902     06F1                     l620:
   903                           
   904                           ;main.c: 63:     PORTCbits.RC7 = 1;
   905     06F1  1283               	bcf	3,5	;RP0=0, select bank0
   906     06F2  1303               	bcf	3,6	;RP1=0, select bank0
   907     06F3  1787               	bsf	7,7	;volatile
   908                           
   909                           ;main.c: 64:     PORTCbits.RC5 = 1;
   910     06F4  1687               	bsf	7,5	;volatile
   911                           
   912                           ;main.c: 65:     PORTCbits.RC6 = 0;
   913     06F5  1307               	bcf	7,6	;volatile
   914     06F6                     l622:
   915                           
   916                           ;main.c: 66:     PORTD = data;
   917     06F6  0872               	movf	lcd_data@data,w
   918     06F7  0088               	movwf	8	;volatile
   919                           
   920                           ;main.c: 67:     _delay((unsigned long)((5)*(20000000/4000.0)));
   921     06F8  3021               	movlw	33
   922     06F9  00F1               	movwf	??_lcd_data+1
   923     06FA  3076               	movlw	118
   924     06FB  00F0               	movwf	??_lcd_data
   925     06FC                     u207:
   926     06FC  0BF0               	decfsz	??_lcd_data,f
   927     06FD  2EFC               	goto	u207
   928     06FE  0BF1               	decfsz	??_lcd_data+1,f
   929     06FF  2EFC               	goto	u207
   930     0700  0000               	nop
   931     0701                     l624:
   932                           
   933                           ;main.c: 68:     PORTCbits.RC7 = 0;
   934     0701  1283               	bcf	3,5	;RP0=0, select bank0
   935     0702  1303               	bcf	3,6	;RP1=0, select bank0
   936     0703  1387               	bcf	7,7	;volatile
   937     0704                     l42:
   938     0704  0008               	return
   939     0705                     __end_of_lcd_data:
   940     007E                     btemp	set	126	;btemp
   941     007E                     wtemp0	set	126
   942                           
   943                           	psect	config
   944                           
   945                           ;Config register CONFIG @ 0x2007
   946                           ;	Oscillator Selection bits
   947                           ;	FOSC = HS, HS oscillator
   948                           ;	Watchdog Timer Enable bit
   949                           ;	WDTE = OFF, WDT disabled
   950                           ;	Power-up Timer Enable bit
   951                           ;	PWRTE = OFF, PWRT disabled
   952                           ;	Brown-out Reset Enable bit
   953                           ;	BOREN = OFF, BOR disabled
   954                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   955                           ;	LVP = ON, RB3/PGM pin has PGM function; low-voltage programming enabled
   956                           ;	Data EEPROM Memory Code Protection bit
   957                           ;	CPD = OFF, Data EEPROM code protection off
   958                           ;	Flash Program Memory Write Enable bits
   959                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   960                           ;	In-Circuit Debugger Mode bit
   961                           ;	DEBUG = 0x1, unprogrammed default
   962                           ;	Flash Program Memory Code Protection bit
   963                           ;	CP = OFF, Code protection off
   964     2007                     	org	8199
   965     2007  3FBA               	dw	16314

Data Sizes:
    Strings     27
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    check_active_row@str	PTR const unsigned char  size(1) Largest target is 5
		 -> STR_2(CODE[5]), STR_3(CODE[5]), STR_4(CODE[5]), 

    lcd_string@str	PTR const unsigned char  size(1) Largest target is 12
		 -> STR_1(CODE[12]), 


Critical Paths under _main in COMMON

    _main->_lcd_string
    _lcd_string->_lcd_data
    _lcd_initialize->_lcd_command
    _keypad->_check_active_row
    _check_active_row->_lcd_data

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     446
                             _keypad
                        _lcd_command
                     _lcd_initialize
                         _lcd_string
 ---------------------------------------------------------------------------------
 (1) _lcd_string                                           3     2      1     214
                                              3 COMMON     3     2      1
                           _lcd_data
 ---------------------------------------------------------------------------------
 (1) _lcd_initialize                                       0     0      0      15
                        _lcd_command
 ---------------------------------------------------------------------------------
 (2) _lcd_command                                          3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _keypad                                               0     0      0     202
                   _check_active_row
 ---------------------------------------------------------------------------------
 (2) _check_active_row                                     1     1      0     202
                                              3 COMMON     1     1      0
                           _lcd_data
 ---------------------------------------------------------------------------------
 (2) _lcd_data                                             3     3      0      15
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _keypad
     _check_active_row
       _lcd_data
   _lcd_command
   _lcd_initialize
     _lcd_command
   _lcd_string
     _lcd_data

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMMON            E      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMMON               E      6       6       1       42.9%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
STACK                0      0       0       2        0.0%
ABS                  0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
SFR2                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BANK1               50      0       0       7        0.0%
BITBANK3            60      0       0       8        0.0%
BANK3               60      0       0       9        0.0%
BITBANK2            60      0       0      10        0.0%
BANK2               60      0       0      11        0.0%
DATA                 0      0       0      12        0.0%


Microchip Technology PIC Macro Assembler V2.45 build 20230818022343 
Symbol Table                                                                                   Thu May 16 21:30:48 2024

                       pc 0002              lcd_data@data 0072                        l42 0704  
                      l51 0719                        l62 07CC                        l54 076F  
                      l63 07C5                        l39 0732                        l48 074D  
                      l73 07F5                        l57 07B4                        l58 07AD  
                      l67 07E4                        l68 07DD                        l76 07FB  
                      fsr 0004                       l620 06F1                       l700 0736  
                     l622 06F6                       l710 0759                       l630 0716  
                     l702 0743                       l624 0701                       l720 0768  
                     l712 075C                       l704 0747                       l714 075D  
                     l706 074E                       l626 0706                       l642 071A  
                     l730 0777                       l722 0770                       l716 0764  
                     l708 0753                       l628 070B                       l740 0791  
                     l732 0778                       l724 0774                       l718 0767  
                     l734 077D                       l726 0775                       l736 0783  
                     l728 0776                       l690 07A1                       l738 078B  
                     l692 07B8                       l694 07D0                       l696 07E8  
                     l688 079B                       l698 0734                       u100 07A1  
                     u101 07A0                       u110 07B3                       u111 07B2  
                     u120 07B8                       u121 07B7                       u130 07CB  
                     u131 07CA                       u140 07D0                       u141 07CF  
                     u150 07E3                       u207 06FC                       u151 07E2  
                     u160 07E8                       u161 07E7                       u170 07FB  
                     u171 07FA                       u180 074D                       u181 074C  
                     u197 0711                       fsr0 0004          _check_active_row 079A  
                    STR_1 0009                      STR_2 001A                      STR_3 001F  
                    STR_4 0015                      _main 0770                      btemp 007E  
                    start 0000               lcd_string@i 0075                     ?_main 0070  
                   _PORTD 0008                     _TRISB 0086                     _TRISD 0088  
                   pclath 000A                     status 0003                     wtemp0 007E  
         __initialization 07FC              __end_of_main 079A                    ??_main 0076  
          lcd_command@cmd 0072                    _TRISC5 043D                    _TRISC6 043E  
                  _TRISC7 043F          __end_of_lcd_data 0705                    _keypad 074E  
        ??_lcd_initialize 0073             lcd_string@len 0073             lcd_string@str 0074  
 __end_of__initialization 07FC            __pcstackCOMMON 0070  __end_of_check_active_row 07FC  
              __pmaintext 0770                   ?_keypad 0070                 ?_lcd_data 0070  
              _lcd_string 0733                __stringtab 0003                   __ptext1 0733  
                 __ptext2 071A                   __ptext3 0705                   __ptext4 074E  
                 __ptext5 079A                   __ptext6 06F0                ??_lcd_data 0070  
    end_of_initialization 07FC                 _PORTBbits 0006                 _PORTCbits 0007  
             ?_lcd_string 0073             ??_lcd_command 0070         ?_check_active_row 0070  
      ??_check_active_row 0073            __end_of_keypad 0770       start_initialization 07FC  
     __end_of_lcd_command 071A                  ??_keypad 0074                 ___latbits 0002  
               __pstrings 0003               _lcd_command 0705               __stringbase 0008  
            ??_lcd_string 0074        __end_of_lcd_string 074E        __end_of__stringtab 0009  
                _lcd_data 06F0            _lcd_initialize 071A       check_active_row@str 0073  
  __end_of_lcd_initialize 0733                 stringcode 0003                  stringdir 0003  
                stringtab 0003           ?_lcd_initialize 0070              ?_lcd_command 0070  
